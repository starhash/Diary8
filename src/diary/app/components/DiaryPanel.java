/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package diary.app.components;

import diary.Diary8Desktop;
import diary.app.components.resources.Theme;
import diary.app.components.resources.ThemeColors;
import diary.app.controls.MButton;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 *
 * @author Harsh
 */
public class DiaryPanel extends javax.swing.JComponent {

    Date selectedDate;
    int[] numberOfDaysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    String[] monthLabels = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
    int selectedMonth = new Date().getMonth();
    int selectedYear = new Date().getYear() + 1900;
    int selectedDateItem = -1;

    /**
     * Creates new form HomePanel
     */
    public DiaryPanel() {
        initComponents();
        dates.removeAll();
        Date today = new Date();
        for (int i = 0; i < numberOfDaysInMonth[today.getMonth()]; i++) {
            DateItem di = new DateItem();
            final int x = i;
            di.setDate(new Date(today.getYear(), today.getMonth(), i + 1));
            di.DEFAULT = Color.WHITE;
            di.setColors(Color.BLACK, di.DEFAULT);
            di.go.setBackground(Color.WHITE);
            dates.add(di);
        }
        datesSP.getVerticalScrollBar().setUnitIncrement(15);
        month.setText(monthLabels[selectedMonth]);
        year.setText(selectedYear + "");
        try {
            setTheme(Diary8Desktop.THEMES.get(Diary8Desktop.DIARY.homePanel.selTheme));
        } catch (NullPointerException e) {
        }
        loadFonts();
    }

    public void setSelectedDate(Date d) {
        System.out.println(d + " : " + d.getDay());
        selectedDate = d;
        dates.removeAll();
        for (int i = 0; i < numberOfDaysInMonth[d.getMonth()]; i++) {
            DateItem di = new DateItem();
            final int x = i;
            di.setDate(new Date(d.getYear() - 1900, d.getMonth(), i + 1));
            di.DEFAULT = Color.WHITE;
            di.setColors(Color.BLACK, di.DEFAULT);
            di.go.setBackground(Color.WHITE);
            dates.add(di);
        }
        datesSP.getVerticalScrollBar().setUnitIncrement(15);
        month.setText(monthLabels[selectedMonth]);
        year.setText(selectedYear + "");
    }

    public void setTheme(Theme t) {
        calendar.setBackground(t.BASE);
        logList.setBackground(t.BDEV1);
        desk.setBackground(t.BDEV2);
    }

    public void loadDate(int date) {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseFont = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        fontListChooser = new javax.swing.JList();
        mLabel1 = new diary.app.controls.MLabel();
        fontSizeChooser = new diary.app.controls.MLabel();
        chooseMonthCombo = new diary.app.controls.MComboPanel();
        calendar = new javax.swing.JPanel();
        datesSP = new javax.swing.JScrollPane();
        dates = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        month = new javax.swing.JLabel();
        year = new javax.swing.JLabel();
        logListSP = new javax.swing.JScrollPane();
        logList = new javax.swing.JPanel();
        desk = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        editorFont = new diary.app.controls.MButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        dEditor2 = new diary.app.components.DEditor();

        chooseFont.setTitle("Select Font");
        chooseFont.setAlwaysOnTop(true);
        chooseFont.setIconImage(null);
        chooseFont.setLocationByPlatform(true);
        chooseFont.setMinimumSize(new java.awt.Dimension(400, 180));
        chooseFont.setModal(true);
        chooseFont.setResizable(false);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 6));

        fontListChooser.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        fontListChooser.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "A", "B", "C", "D" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        fontListChooser.setFixedCellHeight(30);
        fontListChooser.setSelectionBackground(new java.awt.Color(204, 204, 204));
        fontListChooser.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontListChooserValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(fontListChooser);

        mLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mLabel1.setText("Plain");
        mLabel1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                mLabel1MouseWheelMoved(evt);
            }
        });

        fontSizeChooser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fontSizeChooser.setText("24");
        fontSizeChooser.setFont(new java.awt.Font("Segoe UI Light", 0, 36)); // NOI18N
        fontSizeChooser.setMaximumSize(new java.awt.Dimension(113, 56));
        fontSizeChooser.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                fontSizeChooserMouseWheelMoved(evt);
            }
        });

        javax.swing.GroupLayout chooseFontLayout = new javax.swing.GroupLayout(chooseFont.getContentPane());
        chooseFont.getContentPane().setLayout(chooseFontLayout);
        chooseFontLayout.setHorizontalGroup(
            chooseFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseFontLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(chooseFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontSizeChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        chooseFontLayout.setVerticalGroup(
            chooseFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(chooseFontLayout.createSequentialGroup()
                .addComponent(fontSizeChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(mLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
        );

        chooseMonthCombo.setTitle("Choose Month");
        String[] ms = {
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December"
        };
        for(int i = 0; i<12; i++)
        {
            MButton m = new MButton();
            m.setText(ms[i]);
            m.setFont(new Font("Segoe UI Light", 0, 30));
            chooseMonthCombo.addItem(m);
        }

        calendar.setBackground(new java.awt.Color(255, 255, 255));

        datesSP.setBorder(null);
        datesSP.setOpaque(false);

        dates.setBackground(new java.awt.Color(255, 255, 255));
        dates.setLayout(new javax.swing.BoxLayout(dates, javax.swing.BoxLayout.PAGE_AXIS));
        datesSP.setViewportView(dates);

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setOpaque(false);

        month.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        month.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        month.setText("September");
        month.setFocusCycleRoot(true);
        month.setMaximumSize(new java.awt.Dimension(150, 60));
        month.setMinimumSize(new java.awt.Dimension(150, 60));
        month.setPreferredSize(new java.awt.Dimension(150, 60));
        month.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                monthMouseWheelMoved(evt);
            }
        });
        month.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                monthMouseClicked(evt);
            }
        });
        jToolBar1.add(month);

        year.setFont(new java.awt.Font("Segoe UI Light", 0, 26)); // NOI18N
        year.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        year.setText("2014");
        year.setFocusCycleRoot(true);
        year.setMaximumSize(new java.awt.Dimension(100, 60));
        year.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                yearMouseWheelMoved(evt);
            }
        });
        jToolBar1.add(year);

        javax.swing.GroupLayout calendarLayout = new javax.swing.GroupLayout(calendar);
        calendar.setLayout(calendarLayout);
        calendarLayout.setHorizontalGroup(
            calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calendarLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datesSP))
                .addGap(0, 0, 0))
        );
        calendarLayout.setVerticalGroup(
            calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calendarLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(datesSP)
                .addGap(0, 0, 0))
        );

        logListSP.setBorder(null);

        logList.setBackground(new java.awt.Color(250, 250, 250));
        logList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logListMouseClicked(evt);
            }
        });
        logList.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                logListComponentAdded(evt);
            }
        });
        logList.setLayout(new org.jdesktop.swingx.VerticalLayout());
        logListSP.setViewportView(logList);

        desk.setBackground(new java.awt.Color(245, 245, 245));

        jTextField1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextField1.setText("TITLE");
        jTextField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4));
        jTextField1.setMargin(new java.awt.Insets(5, 5, 5, 5));

        jPanel1.setOpaque(false);

        editorFont.setText("Aver");
        editorFont.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                editorFontMouseWheelMoved(evt);
            }
        });
        editorFont.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editorFontMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editorFont, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editorFont, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(248, 248, 248), 10));
        jScrollPane2.setViewportView(dEditor2);

        javax.swing.GroupLayout deskLayout = new javax.swing.GroupLayout(desk);
        desk.setLayout(deskLayout);
        deskLayout.setHorizontalGroup(
            deskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deskLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE))
                .addContainerGap())
        );
        deskLayout.setVerticalGroup(
            deskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deskLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(calendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(logListSP, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(desk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(logListSP)
            .addComponent(calendar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void monthMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_monthMouseWheelMoved
        // TODO add your handling code here:
        int uod = evt.getWheelRotation();
        selectedMonth += uod;
        if (selectedMonth < 0) {
            selectedMonth = 11;
            selectedYear -= 1;
        } else if (selectedMonth > 11) {
            selectedMonth = 0;
            selectedYear += 1;
            if(selectedYear>new Date().getYear()+1900) {
                selectedYear -= 1;
                selectedMonth = 11;
            }
        } else {
            if(selectedMonth>new Date().getMonth() && selectedYear==new Date().getYear()+1900) {
                selectedMonth = new Date().getMonth();
            }
        }
        month.setText(monthLabels[selectedMonth]);
        setSelectedDate(new Date(selectedYear, selectedMonth, 1));
    }//GEN-LAST:event_monthMouseWheelMoved

    private void yearMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_yearMouseWheelMoved
        // TODO add your handling code here:
        int uod = evt.getWheelRotation();
        selectedYear += uod;
        if (selectedYear < 1900) {
            selectedYear = 1900;
        } else if (selectedYear > new Date().getYear() + 1900) {
            selectedYear = new Date().getYear() + 1900;
        }
        year.setText(selectedYear + "");
        setSelectedDate(new Date(selectedYear, selectedMonth, 1));
    }//GEN-LAST:event_yearMouseWheelMoved

    private void logListComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_logListComponentAdded
        // TODO add your handling code here:
        logList.repaint();
    }//GEN-LAST:event_logListComponentAdded

    private void editorFontMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_editorFontMouseWheelMoved
        // TODO add your handling code here:
        int uod = evt.getWheelRotation();
        selectedFont += uod;
        if (selectedFont < 0) {
            selectedFont = 0;
        } else if (selectedFont > FONTS.size() - 1) {
            selectedFont = FONTS.size() - 1;
        }
        editorFont.setText(FONTS.get(selectedFont).getName());
        dEditor2.setFont(new Font(FONTS.get(selectedFont).getName(), 0, 30));
    }//GEN-LAST:event_editorFontMouseWheelMoved

    private void editorFontMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editorFontMouseClicked
        // TODO add your handling code here:
        chooseFont.show();
    }//GEN-LAST:event_editorFontMouseClicked

    private void logListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logListMouseClicked
        // TODO add your handling code here:
        dEditor2.setText("");
    }//GEN-LAST:event_logListMouseClicked

    private void fontListChooserValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fontListChooserValueChanged
        // TODO add your handling code here:
        selectedFontFace = fontListChooser.getSelectedValue().toString();
        dEditor2.setFont(new Font(selectedFontFace, selectedFontStyle, selectedFontSize));
    }//GEN-LAST:event_fontListChooserValueChanged

    private void fontSizeChooserMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_fontSizeChooserMouseWheelMoved
        // TODO add your handling code here:
        int n = Integer.parseInt(fontSizeChooser.getText());
        n += evt.getWheelRotation();
        if (n < 8) {
            n = 8;
        }
        fontSizeChooser.setText(n + "");
        selectedFontSize = n;
        dEditor2.setFont(new Font(selectedFontFace, selectedFontStyle, selectedFontSize));
    }//GEN-LAST:event_fontSizeChooserMouseWheelMoved

    private void mLabel1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_mLabel1MouseWheelMoved
        // TODO add your handling code here:
        System.out.println("OO");
        selectedFontStyle += evt.getWheelRotation();
        if (selectedFontStyle < 0) {
            selectedFontStyle = 0;
        } else if (selectedFontStyle > fontStyleConstants.length - 1) {
            selectedFontStyle = fontStyleConstants.length - 1;
        }
        mLabel1.setText("<html>" + fontStyleLabels[selectedFontStyle] + "</html>");
        dEditor2.setFont(new Font(selectedFontFace, fontStyleConstants[selectedFontStyle], selectedFontSize));
    }//GEN-LAST:event_mLabel1MouseWheelMoved

    private void monthMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthMouseClicked
        // TODO add your handling code here:
        chooseMonthCombo.show();
    }//GEN-LAST:event_monthMouseClicked

    int selectedFontSize = 16;
    int selectedFontStyle = 0;
    String selectedFontFace = "Aver";
    int[] fontStyleConstants = {Font.PLAIN, Font.BOLD, Font.ITALIC, Font.BOLD | Font.ITALIC};
    String[] fontStyleLabels = {"Plain", "<b>BOLD</b>", "<i>Italic</i>", "<b><i>BOLD Italic</i></b>"};


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel calendar;
    public javax.swing.JDialog chooseFont;
    public diary.app.controls.MComboPanel chooseMonthCombo;
    public diary.app.components.DEditor dEditor2;
    public javax.swing.JPanel dates;
    public javax.swing.JScrollPane datesSP;
    public javax.swing.JPanel desk;
    public diary.app.controls.MButton editorFont;
    public javax.swing.JList fontListChooser;
    public diary.app.controls.MLabel fontSizeChooser;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextField jTextField1;
    public javax.swing.JToolBar jToolBar1;
    public javax.swing.JPanel logList;
    public javax.swing.JScrollPane logListSP;
    public diary.app.controls.MLabel mLabel1;
    public javax.swing.JLabel month;
    public javax.swing.JLabel year;
    // End of variables declaration//GEN-END:variables

    void loadLogs(File logDir) {
        File[] loglist = logDir.listFiles();
        logList.removeAll();
        System.out.println("Done" + loglist.length);
        for (File f : loglist) {
            LogItem li = new LogItem();
            li.setLog(f.getName());
            li.setVisible(true);
            logList.add(li);
        }
        logList.repaint();
        logList.revalidate();
        logList.setVisible(true);
    }

    public void loadFonts() {
        try {
            File[] fl = new File(getClass().getResource("/diary/app/components/resources/fonts/").toURI()).listFiles();
            DefaultListModel d = new DefaultListModel();
            for (File f : fl) {
                GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
                Font ff = Font.createFont(Font.TRUETYPE_FONT, new File(f.toURI()));
                ge.registerFont(ff);
                System.out.println(f.getName());
                FONTS.add(ff);
                d.addElement(ff.getName());
            }
            fontListChooser.setCellRenderer(new ListCellRenderer() {

                @Override
                public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                    JLabel j = new JLabel((String) value);
                    j.setOpaque(true);
                    if (cellHasFocus) {
                        j.setBackground(Color.lightGray);
                    } else if (isSelected) {
                        j.setBackground(Color.gray);
                    } else {
                        j.setBackground(Color.white);
                    }
                    j.setFont(new Font((String) value, 0, 18));
                    return j;
                }
            });
            fontListChooser.setModel(d);
            editorFont.setText("Aver");
            dEditor2.setFont(new Font("Aver", 0, 16));
        } catch (FontFormatException ex) {
            Logger.getLogger(DiaryPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DiaryPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (URISyntaxException ex) {
            Logger.getLogger(DiaryPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    Vector<Font> FONTS = new Vector<>();
    int selectedFont = 0;
}
